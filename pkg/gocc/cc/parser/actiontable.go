// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: Functions
			nil,       // empty
			reduce(3), // func, reduce: Functions
			reduce(3), // ident, reduce: Functions
			reduce(3), // lparen, reduce: Functions
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(3), // if, reduce: Functions
			reduce(3), // iter, reduce: Functions
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(3), // ent, reduce: Functions
			reduce(3), // return, reduce: Functions
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(3), // string_literal, reduce: Functions
			reduce(3), // error, reduce: Functions
			reduce(3), // true, reduce: Functions
			reduce(3), // false, reduce: Functions
			reduce(3), // lquad, reduce: Functions
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // empty
			nil,          // func
			nil,          // ident
			nil,          // lparen
			nil,          // rparen
			nil,          // lfigure
			nil,          // rfigure
			nil,          // if
			nil,          // iter
			nil,          // by
			nil,          // assign
			nil,          // semicolon
			nil,          // ent
			nil,          // return
			nil,          // else
			nil,          // plus
			nil,          // minus
			nil,          // lte
			nil,          // gte
			nil,          // lt
			nil,          // gt
			nil,          // eq
			nil,          // neq
			nil,          // and
			nil,          // or
			nil,          // mul
			nil,          // div
			nil,          // string_literal
			nil,          // error
			nil,          // true
			nil,          // false
			nil,          // lquad
			nil,          // rquad
			nil,          // comma
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(6), // $, reduce: Statements
			nil,       // empty
			shift(5),  // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S3
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			nil,       // empty
			nil,       // func
			shift(6),  // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			shift(9),  // if
			shift(11), // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			shift(12), // ent
			shift(13), // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: Functions
			nil,       // empty
			reduce(2), // func, reduce: Functions
			reduce(2), // ident, reduce: Functions
			reduce(2), // lparen, reduce: Functions
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(2), // if, reduce: Functions
			reduce(2), // iter, reduce: Functions
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(2), // ent, reduce: Functions
			reduce(2), // return, reduce: Functions
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(2), // string_literal, reduce: Functions
			reduce(2), // error, reduce: Functions
			reduce(2), // true, reduce: Functions
			reduce(2), // false, reduce: Functions
			reduce(2), // lquad, reduce: Functions
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(23), // ident
			nil,       // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(24),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			shift(25),  // assign
			reduce(35), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S7
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // $, reduce: Statements
			nil,       // empty
			nil,       // func
			reduce(5), // ident, reduce: Statements
			reduce(5), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(5), // if, reduce: Statements
			reduce(5), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(5), // ent, reduce: Statements
			reduce(5), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(5), // string_literal, reduce: Statements
			reduce(5), // error, reduce: Statements
			reduce(5), // true, reduce: Statements
			reduce(5), // false, reduce: Statements
			reduce(5), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S9
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(38), // ident
			shift(39), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(45), // string_literal
			shift(46), // error
			shift(47), // true
			shift(48), // false
			shift(49), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // ident
			nil,       // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			shift(50), // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			shift(52), // plus
			shift(53), // minus
			shift(54), // lte
			shift(55), // gte
			shift(56), // lt
			shift(57), // gt
			shift(58), // eq
			shift(59), // neq
			shift(60), // and
			shift(61), // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(62), // ident
			nil,       // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(63), // ident
			nil,       // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S13
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(17), // semicolon, reduce: Expression
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(17), // plus, reduce: Expression
			reduce(17), // minus, reduce: Expression
			reduce(17), // lte, reduce: Expression
			reduce(17), // gte, reduce: Expression
			reduce(17), // lt, reduce: Expression
			reduce(17), // gt, reduce: Expression
			reduce(17), // eq, reduce: Expression
			reduce(17), // neq, reduce: Expression
			reduce(17), // and, reduce: Expression
			reduce(17), // or, reduce: Expression
			shift(66),  // mul
			shift(67),  // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(33), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(33), // plus, reduce: Term
			reduce(33), // minus, reduce: Term
			reduce(33), // lte, reduce: Term
			reduce(33), // gte, reduce: Term
			reduce(33), // lt, reduce: Term
			reduce(33), // gt, reduce: Term
			reduce(33), // eq, reduce: Term
			reduce(33), // neq, reduce: Term
			reduce(33), // and, reduce: Term
			reduce(33), // or, reduce: Term
			reduce(33), // mul, reduce: Term
			reduce(33), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(30), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(30), // plus, reduce: Term
			reduce(30), // minus, reduce: Term
			reduce(30), // lte, reduce: Term
			reduce(30), // gte, reduce: Term
			reduce(30), // lt, reduce: Term
			reduce(30), // gt, reduce: Term
			reduce(30), // eq, reduce: Term
			reduce(30), // neq, reduce: Term
			reduce(30), // and, reduce: Term
			reduce(30), // or, reduce: Term
			reduce(30), // mul, reduce: Term
			reduce(30), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(31), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(31), // plus, reduce: Term
			reduce(31), // minus, reduce: Term
			reduce(31), // lte, reduce: Term
			reduce(31), // gte, reduce: Term
			reduce(31), // lt, reduce: Term
			reduce(31), // gt, reduce: Term
			reduce(31), // eq, reduce: Term
			reduce(31), // neq, reduce: Term
			reduce(31), // and, reduce: Term
			reduce(31), // or, reduce: Term
			reduce(31), // mul, reduce: Term
			reduce(31), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(32), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(32), // plus, reduce: Term
			reduce(32), // minus, reduce: Term
			reduce(32), // lte, reduce: Term
			reduce(32), // gte, reduce: Term
			reduce(32), // lt, reduce: Term
			reduce(32), // gt, reduce: Term
			reduce(32), // eq, reduce: Term
			reduce(32), // neq, reduce: Term
			reduce(32), // and, reduce: Term
			reduce(32), // or, reduce: Term
			reduce(32), // mul, reduce: Term
			reduce(32), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S19
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(37), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(37), // plus, reduce: Factor
			reduce(37), // minus, reduce: Factor
			reduce(37), // lte, reduce: Factor
			reduce(37), // gte, reduce: Factor
			reduce(37), // lt, reduce: Factor
			reduce(37), // gt, reduce: Factor
			reduce(37), // eq, reduce: Factor
			reduce(37), // neq, reduce: Factor
			reduce(37), // and, reduce: Factor
			reduce(37), // or, reduce: Factor
			reduce(37), // mul, reduce: Factor
			reduce(37), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(38), // semicolon, reduce: Bool
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(38), // plus, reduce: Bool
			reduce(38), // minus, reduce: Bool
			reduce(38), // lte, reduce: Bool
			reduce(38), // gte, reduce: Bool
			reduce(38), // lt, reduce: Bool
			reduce(38), // gt, reduce: Bool
			reduce(38), // eq, reduce: Bool
			reduce(38), // neq, reduce: Bool
			reduce(38), // and, reduce: Bool
			reduce(38), // or, reduce: Bool
			reduce(38), // mul, reduce: Bool
			reduce(38), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(39), // semicolon, reduce: Bool
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(39), // plus, reduce: Bool
			reduce(39), // minus, reduce: Bool
			reduce(39), // lte, reduce: Bool
			reduce(39), // gte, reduce: Bool
			reduce(39), // lt, reduce: Bool
			reduce(39), // gt, reduce: Bool
			reduce(39), // eq, reduce: Bool
			reduce(39), // neq, reduce: Bool
			reduce(39), // and, reduce: Bool
			reduce(39), // or, reduce: Bool
			reduce(39), // mul, reduce: Bool
			reduce(39), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S22
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(68),  // ident
			shift(69),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(75),  // string_literal
			shift(77),  // error
			shift(78),  // true
			shift(79),  // false
			shift(80),  // lquad
			reduce(42), // rquad, reduce: Args
			nil,        // comma
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // ident
			shift(81), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S24
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(82),  // ident
			shift(83),  // lparen
			reduce(42), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(89),  // string_literal
			shift(91),  // error
			shift(92),  // true
			shift(93),  // false
			shift(94),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S25
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(96),  // lparen
			reduce(35), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S27
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // ident
			nil,       // lparen
			shift(98), // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			shift(52), // plus
			shift(53), // minus
			shift(54), // lte
			shift(55), // gte
			shift(56), // lt
			shift(57), // gt
			shift(58), // eq
			shift(59), // neq
			shift(60), // and
			shift(61), // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			nil,       // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(17), // rparen, reduce: Expression
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(17), // plus, reduce: Expression
			reduce(17), // minus, reduce: Expression
			reduce(17), // lte, reduce: Expression
			reduce(17), // gte, reduce: Expression
			reduce(17), // lt, reduce: Expression
			reduce(17), // gt, reduce: Expression
			reduce(17), // eq, reduce: Expression
			reduce(17), // neq, reduce: Expression
			reduce(17), // and, reduce: Expression
			reduce(17), // or, reduce: Expression
			shift(100), // mul
			shift(101), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(33), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(33), // plus, reduce: Term
			reduce(33), // minus, reduce: Term
			reduce(33), // lte, reduce: Term
			reduce(33), // gte, reduce: Term
			reduce(33), // lt, reduce: Term
			reduce(33), // gt, reduce: Term
			reduce(33), // eq, reduce: Term
			reduce(33), // neq, reduce: Term
			reduce(33), // and, reduce: Term
			reduce(33), // or, reduce: Term
			reduce(33), // mul, reduce: Term
			reduce(33), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(30), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(30), // plus, reduce: Term
			reduce(30), // minus, reduce: Term
			reduce(30), // lte, reduce: Term
			reduce(30), // gte, reduce: Term
			reduce(30), // lt, reduce: Term
			reduce(30), // gt, reduce: Term
			reduce(30), // eq, reduce: Term
			reduce(30), // neq, reduce: Term
			reduce(30), // and, reduce: Term
			reduce(30), // or, reduce: Term
			reduce(30), // mul, reduce: Term
			reduce(30), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(31), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(31), // plus, reduce: Term
			reduce(31), // minus, reduce: Term
			reduce(31), // lte, reduce: Term
			reduce(31), // gte, reduce: Term
			reduce(31), // lt, reduce: Term
			reduce(31), // gt, reduce: Term
			reduce(31), // eq, reduce: Term
			reduce(31), // neq, reduce: Term
			reduce(31), // and, reduce: Term
			reduce(31), // or, reduce: Term
			reduce(31), // mul, reduce: Term
			reduce(31), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(32), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(32), // plus, reduce: Term
			reduce(32), // minus, reduce: Term
			reduce(32), // lte, reduce: Term
			reduce(32), // gte, reduce: Term
			reduce(32), // lt, reduce: Term
			reduce(32), // gt, reduce: Term
			reduce(32), // eq, reduce: Term
			reduce(32), // neq, reduce: Term
			reduce(32), // and, reduce: Term
			reduce(32), // or, reduce: Term
			reduce(32), // mul, reduce: Term
			reduce(32), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S34
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(37), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(37), // plus, reduce: Factor
			reduce(37), // minus, reduce: Factor
			reduce(37), // lte, reduce: Factor
			reduce(37), // gte, reduce: Factor
			reduce(37), // lt, reduce: Factor
			reduce(37), // gt, reduce: Factor
			reduce(37), // eq, reduce: Factor
			reduce(37), // neq, reduce: Factor
			reduce(37), // and, reduce: Factor
			reduce(37), // or, reduce: Factor
			reduce(37), // mul, reduce: Factor
			reduce(37), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(38), // rparen, reduce: Bool
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(38), // plus, reduce: Bool
			reduce(38), // minus, reduce: Bool
			reduce(38), // lte, reduce: Bool
			reduce(38), // gte, reduce: Bool
			reduce(38), // lt, reduce: Bool
			reduce(38), // gt, reduce: Bool
			reduce(38), // eq, reduce: Bool
			reduce(38), // neq, reduce: Bool
			reduce(38), // and, reduce: Bool
			reduce(38), // or, reduce: Bool
			reduce(38), // mul, reduce: Bool
			reduce(38), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(39), // rparen, reduce: Bool
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(39), // plus, reduce: Bool
			reduce(39), // minus, reduce: Bool
			reduce(39), // lte, reduce: Bool
			reduce(39), // gte, reduce: Bool
			reduce(39), // lt, reduce: Bool
			reduce(39), // gt, reduce: Bool
			reduce(39), // eq, reduce: Bool
			reduce(39), // neq, reduce: Bool
			reduce(39), // and, reduce: Bool
			reduce(39), // or, reduce: Bool
			reduce(39), // mul, reduce: Bool
			reduce(39), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S37
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(68),  // ident
			shift(69),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(75),  // string_literal
			shift(77),  // error
			shift(78),  // true
			shift(79),  // false
			shift(80),  // lquad
			reduce(42), // rquad, reduce: Args
			nil,        // comma
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(103), // lparen
			nil,        // rparen
			reduce(35), // lfigure, reduce: Factor
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S39
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(106), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(17), // lfigure, reduce: Expression
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(17), // plus, reduce: Expression
			reduce(17), // minus, reduce: Expression
			reduce(17), // lte, reduce: Expression
			reduce(17), // gte, reduce: Expression
			reduce(17), // lt, reduce: Expression
			reduce(17), // gt, reduce: Expression
			reduce(17), // eq, reduce: Expression
			reduce(17), // neq, reduce: Expression
			reduce(17), // and, reduce: Expression
			reduce(17), // or, reduce: Expression
			shift(108), // mul
			shift(109), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(33), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(33), // plus, reduce: Term
			reduce(33), // minus, reduce: Term
			reduce(33), // lte, reduce: Term
			reduce(33), // gte, reduce: Term
			reduce(33), // lt, reduce: Term
			reduce(33), // gt, reduce: Term
			reduce(33), // eq, reduce: Term
			reduce(33), // neq, reduce: Term
			reduce(33), // and, reduce: Term
			reduce(33), // or, reduce: Term
			reduce(33), // mul, reduce: Term
			reduce(33), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(30), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(30), // plus, reduce: Term
			reduce(30), // minus, reduce: Term
			reduce(30), // lte, reduce: Term
			reduce(30), // gte, reduce: Term
			reduce(30), // lt, reduce: Term
			reduce(30), // gt, reduce: Term
			reduce(30), // eq, reduce: Term
			reduce(30), // neq, reduce: Term
			reduce(30), // and, reduce: Term
			reduce(30), // or, reduce: Term
			reduce(30), // mul, reduce: Term
			reduce(30), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(31), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(31), // plus, reduce: Term
			reduce(31), // minus, reduce: Term
			reduce(31), // lte, reduce: Term
			reduce(31), // gte, reduce: Term
			reduce(31), // lt, reduce: Term
			reduce(31), // gt, reduce: Term
			reduce(31), // eq, reduce: Term
			reduce(31), // neq, reduce: Term
			reduce(31), // and, reduce: Term
			reduce(31), // or, reduce: Term
			reduce(31), // mul, reduce: Term
			reduce(31), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(32), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(32), // plus, reduce: Term
			reduce(32), // minus, reduce: Term
			reduce(32), // lte, reduce: Term
			reduce(32), // gte, reduce: Term
			reduce(32), // lt, reduce: Term
			reduce(32), // gt, reduce: Term
			reduce(32), // eq, reduce: Term
			reduce(32), // neq, reduce: Term
			reduce(32), // and, reduce: Term
			reduce(32), // or, reduce: Term
			reduce(32), // mul, reduce: Term
			reduce(32), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S46
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(37), // lfigure, reduce: Factor
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(37), // plus, reduce: Factor
			reduce(37), // minus, reduce: Factor
			reduce(37), // lte, reduce: Factor
			reduce(37), // gte, reduce: Factor
			reduce(37), // lt, reduce: Factor
			reduce(37), // gt, reduce: Factor
			reduce(37), // eq, reduce: Factor
			reduce(37), // neq, reduce: Factor
			reduce(37), // and, reduce: Factor
			reduce(37), // or, reduce: Factor
			reduce(37), // mul, reduce: Factor
			reduce(37), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(38), // lfigure, reduce: Bool
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(38), // plus, reduce: Bool
			reduce(38), // minus, reduce: Bool
			reduce(38), // lte, reduce: Bool
			reduce(38), // gte, reduce: Bool
			reduce(38), // lt, reduce: Bool
			reduce(38), // gt, reduce: Bool
			reduce(38), // eq, reduce: Bool
			reduce(38), // neq, reduce: Bool
			reduce(38), // and, reduce: Bool
			reduce(38), // or, reduce: Bool
			reduce(38), // mul, reduce: Bool
			reduce(38), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(39), // lfigure, reduce: Bool
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(39), // plus, reduce: Bool
			reduce(39), // minus, reduce: Bool
			reduce(39), // lte, reduce: Bool
			reduce(39), // gte, reduce: Bool
			reduce(39), // lt, reduce: Bool
			reduce(39), // gt, reduce: Bool
			reduce(39), // eq, reduce: Bool
			reduce(39), // neq, reduce: Bool
			reduce(39), // and, reduce: Bool
			reduce(39), // or, reduce: Bool
			reduce(39), // mul, reduce: Bool
			reduce(39), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S49
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(68),  // ident
			shift(69),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(75),  // string_literal
			shift(77),  // error
			shift(78),  // true
			shift(79),  // false
			shift(80),  // lquad
			reduce(42), // rquad, reduce: Args
			nil,        // comma
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(12), // $, reduce: Statement
			nil,        // empty
			nil,        // func
			reduce(12), // ident, reduce: Statement
			reduce(12), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(12), // if, reduce: Statement
			reduce(12), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(12), // ent, reduce: Statement
			reduce(12), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(12), // string_literal, reduce: Statement
			reduce(12), // error, reduce: Statement
			reduce(12), // true, reduce: Statement
			reduce(12), // false, reduce: Statement
			reduce(12), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S51
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(18), // ident, reduce: Operation
			reduce(18), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(18), // string_literal, reduce: Operation
			reduce(18), // error, reduce: Operation
			reduce(18), // true, reduce: Operation
			reduce(18), // false, reduce: Operation
			reduce(18), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(19), // ident, reduce: Operation
			reduce(19), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(19), // string_literal, reduce: Operation
			reduce(19), // error, reduce: Operation
			reduce(19), // true, reduce: Operation
			reduce(19), // false, reduce: Operation
			reduce(19), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(20), // ident, reduce: Operation
			reduce(20), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(20), // string_literal, reduce: Operation
			reduce(20), // error, reduce: Operation
			reduce(20), // true, reduce: Operation
			reduce(20), // false, reduce: Operation
			reduce(20), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(21), // ident, reduce: Operation
			reduce(21), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(21), // string_literal, reduce: Operation
			reduce(21), // error, reduce: Operation
			reduce(21), // true, reduce: Operation
			reduce(21), // false, reduce: Operation
			reduce(21), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(22), // ident, reduce: Operation
			reduce(22), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(22), // string_literal, reduce: Operation
			reduce(22), // error, reduce: Operation
			reduce(22), // true, reduce: Operation
			reduce(22), // false, reduce: Operation
			reduce(22), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(23), // ident, reduce: Operation
			reduce(23), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(23), // string_literal, reduce: Operation
			reduce(23), // error, reduce: Operation
			reduce(23), // true, reduce: Operation
			reduce(23), // false, reduce: Operation
			reduce(23), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(24), // ident, reduce: Operation
			reduce(24), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(24), // string_literal, reduce: Operation
			reduce(24), // error, reduce: Operation
			reduce(24), // true, reduce: Operation
			reduce(24), // false, reduce: Operation
			reduce(24), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(25), // ident, reduce: Operation
			reduce(25), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(25), // string_literal, reduce: Operation
			reduce(25), // error, reduce: Operation
			reduce(25), // true, reduce: Operation
			reduce(25), // false, reduce: Operation
			reduce(25), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(26), // ident, reduce: Operation
			reduce(26), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(26), // string_literal, reduce: Operation
			reduce(26), // error, reduce: Operation
			reduce(26), // true, reduce: Operation
			reduce(26), // false, reduce: Operation
			reduce(26), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(27), // ident, reduce: Operation
			reduce(27), // lparen, reduce: Operation
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(27), // string_literal, reduce: Operation
			reduce(27), // error, reduce: Operation
			reduce(27), // true, reduce: Operation
			reduce(27), // false, reduce: Operation
			reduce(27), // lquad, reduce: Operation
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			shift(112), // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			shift(113), // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(24),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(35), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(114), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S66
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(19), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S67
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(19), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(117), // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(35), // rquad, reduce: Factor
			reduce(35), // comma, reduce: Factor
		},
	},
	actionRow{ // S69
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(44), // rquad, reduce: ArgsList
			reduce(44), // comma, reduce: ArgsList
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(17), // plus, reduce: Expression
			reduce(17), // minus, reduce: Expression
			reduce(17), // lte, reduce: Expression
			reduce(17), // gte, reduce: Expression
			reduce(17), // lt, reduce: Expression
			reduce(17), // gt, reduce: Expression
			reduce(17), // eq, reduce: Expression
			reduce(17), // neq, reduce: Expression
			reduce(17), // and, reduce: Expression
			reduce(17), // or, reduce: Expression
			shift(121), // mul
			shift(122), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(17), // rquad, reduce: Expression
			reduce(17), // comma, reduce: Expression
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(33), // plus, reduce: Term
			reduce(33), // minus, reduce: Term
			reduce(33), // lte, reduce: Term
			reduce(33), // gte, reduce: Term
			reduce(33), // lt, reduce: Term
			reduce(33), // gt, reduce: Term
			reduce(33), // eq, reduce: Term
			reduce(33), // neq, reduce: Term
			reduce(33), // and, reduce: Term
			reduce(33), // or, reduce: Term
			reduce(33), // mul, reduce: Term
			reduce(33), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(33), // rquad, reduce: Term
			reduce(33), // comma, reduce: Term
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(30), // plus, reduce: Term
			reduce(30), // minus, reduce: Term
			reduce(30), // lte, reduce: Term
			reduce(30), // gte, reduce: Term
			reduce(30), // lt, reduce: Term
			reduce(30), // gt, reduce: Term
			reduce(30), // eq, reduce: Term
			reduce(30), // neq, reduce: Term
			reduce(30), // and, reduce: Term
			reduce(30), // or, reduce: Term
			reduce(30), // mul, reduce: Term
			reduce(30), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(30), // rquad, reduce: Term
			reduce(30), // comma, reduce: Term
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(31), // plus, reduce: Term
			reduce(31), // minus, reduce: Term
			reduce(31), // lte, reduce: Term
			reduce(31), // gte, reduce: Term
			reduce(31), // lt, reduce: Term
			reduce(31), // gt, reduce: Term
			reduce(31), // eq, reduce: Term
			reduce(31), // neq, reduce: Term
			reduce(31), // and, reduce: Term
			reduce(31), // or, reduce: Term
			reduce(31), // mul, reduce: Term
			reduce(31), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(31), // rquad, reduce: Term
			reduce(31), // comma, reduce: Term
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(32), // plus, reduce: Term
			reduce(32), // minus, reduce: Term
			reduce(32), // lte, reduce: Term
			reduce(32), // gte, reduce: Term
			reduce(32), // lt, reduce: Term
			reduce(32), // gt, reduce: Term
			reduce(32), // eq, reduce: Term
			reduce(32), // neq, reduce: Term
			reduce(32), // and, reduce: Term
			reduce(32), // or, reduce: Term
			reduce(32), // mul, reduce: Term
			reduce(32), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(32), // rquad, reduce: Term
			reduce(32), // comma, reduce: Term
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			shift(123), // rquad
			nil,        // comma
		},
	},
	actionRow{ // S77
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(37), // plus, reduce: Factor
			reduce(37), // minus, reduce: Factor
			reduce(37), // lte, reduce: Factor
			reduce(37), // gte, reduce: Factor
			reduce(37), // lt, reduce: Factor
			reduce(37), // gt, reduce: Factor
			reduce(37), // eq, reduce: Factor
			reduce(37), // neq, reduce: Factor
			reduce(37), // and, reduce: Factor
			reduce(37), // or, reduce: Factor
			reduce(37), // mul, reduce: Factor
			reduce(37), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(37), // rquad, reduce: Factor
			reduce(37), // comma, reduce: Factor
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(38), // plus, reduce: Bool
			reduce(38), // minus, reduce: Bool
			reduce(38), // lte, reduce: Bool
			reduce(38), // gte, reduce: Bool
			reduce(38), // lt, reduce: Bool
			reduce(38), // gt, reduce: Bool
			reduce(38), // eq, reduce: Bool
			reduce(38), // neq, reduce: Bool
			reduce(38), // and, reduce: Bool
			reduce(38), // or, reduce: Bool
			reduce(38), // mul, reduce: Bool
			reduce(38), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(38), // rquad, reduce: Bool
			reduce(38), // comma, reduce: Bool
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(39), // plus, reduce: Bool
			reduce(39), // minus, reduce: Bool
			reduce(39), // lte, reduce: Bool
			reduce(39), // gte, reduce: Bool
			reduce(39), // lt, reduce: Bool
			reduce(39), // gt, reduce: Bool
			reduce(39), // eq, reduce: Bool
			reduce(39), // neq, reduce: Bool
			reduce(39), // and, reduce: Bool
			reduce(39), // or, reduce: Bool
			reduce(39), // mul, reduce: Bool
			reduce(39), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(39), // rquad, reduce: Bool
			reduce(39), // comma, reduce: Bool
		},
	},
	actionRow{ // S80
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(68),  // ident
			shift(69),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(75),  // string_literal
			shift(77),  // error
			shift(78),  // true
			shift(79),  // false
			shift(80),  // lquad
			reduce(42), // rquad, reduce: Args
			nil,        // comma
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(125), // ident
			nil,        // lparen
			reduce(46), // rparen, reduce: FormalArgs
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(127), // lparen
			reduce(35), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(35), // comma, reduce: Factor
		},
	},
	actionRow{ // S83
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(44), // rparen, reduce: ArgsList
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(44), // comma, reduce: ArgsList
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(17), // rparen, reduce: Expression
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(17), // plus, reduce: Expression
			reduce(17), // minus, reduce: Expression
			reduce(17), // lte, reduce: Expression
			reduce(17), // gte, reduce: Expression
			reduce(17), // lt, reduce: Expression
			reduce(17), // gt, reduce: Expression
			reduce(17), // eq, reduce: Expression
			reduce(17), // neq, reduce: Expression
			reduce(17), // and, reduce: Expression
			reduce(17), // or, reduce: Expression
			shift(131), // mul
			shift(132), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(17), // comma, reduce: Expression
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(33), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(33), // plus, reduce: Term
			reduce(33), // minus, reduce: Term
			reduce(33), // lte, reduce: Term
			reduce(33), // gte, reduce: Term
			reduce(33), // lt, reduce: Term
			reduce(33), // gt, reduce: Term
			reduce(33), // eq, reduce: Term
			reduce(33), // neq, reduce: Term
			reduce(33), // and, reduce: Term
			reduce(33), // or, reduce: Term
			reduce(33), // mul, reduce: Term
			reduce(33), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(33), // comma, reduce: Term
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(30), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(30), // plus, reduce: Term
			reduce(30), // minus, reduce: Term
			reduce(30), // lte, reduce: Term
			reduce(30), // gte, reduce: Term
			reduce(30), // lt, reduce: Term
			reduce(30), // gt, reduce: Term
			reduce(30), // eq, reduce: Term
			reduce(30), // neq, reduce: Term
			reduce(30), // and, reduce: Term
			reduce(30), // or, reduce: Term
			reduce(30), // mul, reduce: Term
			reduce(30), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(30), // comma, reduce: Term
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(31), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(31), // plus, reduce: Term
			reduce(31), // minus, reduce: Term
			reduce(31), // lte, reduce: Term
			reduce(31), // gte, reduce: Term
			reduce(31), // lt, reduce: Term
			reduce(31), // gt, reduce: Term
			reduce(31), // eq, reduce: Term
			reduce(31), // neq, reduce: Term
			reduce(31), // and, reduce: Term
			reduce(31), // or, reduce: Term
			reduce(31), // mul, reduce: Term
			reduce(31), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(31), // comma, reduce: Term
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(32), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(32), // plus, reduce: Term
			reduce(32), // minus, reduce: Term
			reduce(32), // lte, reduce: Term
			reduce(32), // gte, reduce: Term
			reduce(32), // lt, reduce: Term
			reduce(32), // gt, reduce: Term
			reduce(32), // eq, reduce: Term
			reduce(32), // neq, reduce: Term
			reduce(32), // and, reduce: Term
			reduce(32), // or, reduce: Term
			reduce(32), // mul, reduce: Term
			reduce(32), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(32), // comma, reduce: Term
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(133), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S91
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(37), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(37), // plus, reduce: Factor
			reduce(37), // minus, reduce: Factor
			reduce(37), // lte, reduce: Factor
			reduce(37), // gte, reduce: Factor
			reduce(37), // lt, reduce: Factor
			reduce(37), // gt, reduce: Factor
			reduce(37), // eq, reduce: Factor
			reduce(37), // neq, reduce: Factor
			reduce(37), // and, reduce: Factor
			reduce(37), // or, reduce: Factor
			reduce(37), // mul, reduce: Factor
			reduce(37), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(37), // comma, reduce: Factor
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(38), // rparen, reduce: Bool
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(38), // plus, reduce: Bool
			reduce(38), // minus, reduce: Bool
			reduce(38), // lte, reduce: Bool
			reduce(38), // gte, reduce: Bool
			reduce(38), // lt, reduce: Bool
			reduce(38), // gt, reduce: Bool
			reduce(38), // eq, reduce: Bool
			reduce(38), // neq, reduce: Bool
			reduce(38), // and, reduce: Bool
			reduce(38), // or, reduce: Bool
			reduce(38), // mul, reduce: Bool
			reduce(38), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(38), // comma, reduce: Bool
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(39), // rparen, reduce: Bool
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(39), // plus, reduce: Bool
			reduce(39), // minus, reduce: Bool
			reduce(39), // lte, reduce: Bool
			reduce(39), // gte, reduce: Bool
			reduce(39), // lt, reduce: Bool
			reduce(39), // gt, reduce: Bool
			reduce(39), // eq, reduce: Bool
			reduce(39), // neq, reduce: Bool
			reduce(39), // and, reduce: Bool
			reduce(39), // or, reduce: Bool
			reduce(39), // mul, reduce: Bool
			reduce(39), // div, reduce: Bool
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(39), // comma, reduce: Bool
		},
	},
	actionRow{ // S94
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(68),  // ident
			shift(69),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(75),  // string_literal
			shift(77),  // error
			shift(78),  // true
			shift(79),  // false
			shift(80),  // lquad
			reduce(42), // rquad, reduce: Args
			nil,        // comma
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(135), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S96
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(82),  // ident
			shift(83),  // lparen
			reduce(42), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(89),  // string_literal
			shift(91),  // error
			shift(92),  // true
			shift(93),  // false
			shift(94),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(137), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(34), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(34), // plus, reduce: Factor
			reduce(34), // minus, reduce: Factor
			reduce(34), // lte, reduce: Factor
			reduce(34), // gte, reduce: Factor
			reduce(34), // lt, reduce: Factor
			reduce(34), // gt, reduce: Factor
			reduce(34), // eq, reduce: Factor
			reduce(34), // neq, reduce: Factor
			reduce(34), // and, reduce: Factor
			reduce(34), // or, reduce: Factor
			reduce(34), // mul, reduce: Factor
			reduce(34), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S99
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(33), // string_literal
			shift(34), // error
			shift(35), // true
			shift(36), // false
			shift(37), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S100
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(34), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S101
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(26), // ident
			shift(27), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(34), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			shift(141), // rquad
			nil,        // comma
		},
	},
	actionRow{ // S103
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(82),  // ident
			shift(83),  // lparen
			reduce(42), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(89),  // string_literal
			shift(91),  // error
			shift(92),  // true
			shift(93),  // false
			shift(94),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(143), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(15), // $, reduce: IfStatement
			nil,        // empty
			nil,        // func
			reduce(15), // ident, reduce: IfStatement
			reduce(15), // lparen, reduce: IfStatement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(15), // if, reduce: IfStatement
			reduce(15), // iter, reduce: IfStatement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(15), // ent, reduce: IfStatement
			reduce(15), // return, reduce: IfStatement
			shift(145), // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(15), // string_literal, reduce: IfStatement
			reduce(15), // error, reduce: IfStatement
			reduce(15), // true, reduce: IfStatement
			reduce(15), // false, reduce: IfStatement
			reduce(15), // lquad, reduce: IfStatement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(6), // rfigure, reduce: Statements
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S107
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(38), // ident
			shift(39), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(45), // string_literal
			shift(46), // error
			shift(47), // true
			shift(48), // false
			shift(49), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S108
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(38), // ident
			shift(39), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(46), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S109
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(38), // ident
			shift(39), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(46), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			shift(150), // rquad
			nil,        // comma
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(16), // semicolon, reduce: Expression
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(16), // plus, reduce: Expression
			reduce(16), // minus, reduce: Expression
			reduce(16), // lte, reduce: Expression
			reduce(16), // gte, reduce: Expression
			reduce(16), // lt, reduce: Expression
			reduce(16), // gt, reduce: Expression
			reduce(16), // eq, reduce: Expression
			reduce(16), // neq, reduce: Expression
			reduce(16), // and, reduce: Expression
			reduce(16), // or, reduce: Expression
			shift(66),  // mul
			shift(67),  // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(151), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S113
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(13), // $, reduce: Statement
			nil,        // empty
			nil,        // func
			reduce(13), // ident, reduce: Statement
			reduce(13), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(13), // if, reduce: Statement
			reduce(13), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(13), // ent, reduce: Statement
			reduce(13), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(13), // string_literal, reduce: Statement
			reduce(13), // error, reduce: Statement
			reduce(13), // true, reduce: Statement
			reduce(13), // false, reduce: Statement
			reduce(13), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(28), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(28), // plus, reduce: Term
			reduce(28), // minus, reduce: Term
			reduce(28), // lte, reduce: Term
			reduce(28), // gte, reduce: Term
			reduce(28), // lt, reduce: Term
			reduce(28), // gt, reduce: Term
			reduce(28), // eq, reduce: Term
			reduce(28), // neq, reduce: Term
			reduce(28), // and, reduce: Term
			reduce(28), // or, reduce: Term
			reduce(28), // mul, reduce: Term
			reduce(28), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(29), // semicolon, reduce: Term
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(29), // plus, reduce: Term
			reduce(29), // minus, reduce: Term
			reduce(29), // lte, reduce: Term
			reduce(29), // gte, reduce: Term
			reduce(29), // lt, reduce: Term
			reduce(29), // gt, reduce: Term
			reduce(29), // eq, reduce: Term
			reduce(29), // neq, reduce: Term
			reduce(29), // and, reduce: Term
			reduce(29), // or, reduce: Term
			reduce(29), // mul, reduce: Term
			reduce(29), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S117
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(82),  // ident
			shift(83),  // lparen
			reduce(42), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(89),  // string_literal
			shift(91),  // error
			shift(92),  // true
			shift(93),  // false
			shift(94),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(154), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S119
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(68), // ident
			shift(69), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(75), // string_literal
			shift(77), // error
			shift(78), // true
			shift(79), // false
			shift(80), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(41), // rquad, reduce: Args
			shift(156), // comma
		},
	},
	actionRow{ // S121
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(68), // ident
			shift(69), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(77), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S122
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(68), // ident
			shift(69), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(77), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(40), // semicolon, reduce: Set
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(40), // plus, reduce: Set
			reduce(40), // minus, reduce: Set
			reduce(40), // lte, reduce: Set
			reduce(40), // gte, reduce: Set
			reduce(40), // lt, reduce: Set
			reduce(40), // gt, reduce: Set
			reduce(40), // eq, reduce: Set
			reduce(40), // neq, reduce: Set
			reduce(40), // and, reduce: Set
			reduce(40), // or, reduce: Set
			reduce(40), // mul, reduce: Set
			reduce(40), // div, reduce: Set
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			shift(159), // rquad
			nil,        // comma
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(160), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(161), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S127
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(82),  // ident
			shift(83),  // lparen
			reduce(42), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(89),  // string_literal
			shift(91),  // error
			shift(92),  // true
			shift(93),  // false
			shift(94),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(163), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S129
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(82), // ident
			shift(83), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(89), // string_literal
			shift(91), // error
			shift(92), // true
			shift(93), // false
			shift(94), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(41), // rparen, reduce: Args
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			shift(165), // comma
		},
	},
	actionRow{ // S131
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(82), // ident
			shift(83), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(91), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S132
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(82), // ident
			shift(83), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			nil,       // string_literal
			shift(91), // error
			nil,       // true
			nil,       // false
			nil,       // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			reduce(36), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(36), // plus, reduce: Factor
			reduce(36), // minus, reduce: Factor
			reduce(36), // lte, reduce: Factor
			reduce(36), // gte, reduce: Factor
			reduce(36), // lt, reduce: Factor
			reduce(36), // gt, reduce: Factor
			reduce(36), // eq, reduce: Factor
			reduce(36), // neq, reduce: Factor
			reduce(36), // and, reduce: Factor
			reduce(36), // or, reduce: Factor
			reduce(36), // mul, reduce: Factor
			reduce(36), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			shift(168), // rquad
			nil,        // comma
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(10), // $, reduce: Statement
			nil,        // empty
			nil,        // func
			reduce(10), // ident, reduce: Statement
			reduce(10), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(10), // if, reduce: Statement
			reduce(10), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(10), // ent, reduce: Statement
			reduce(10), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(10), // string_literal, reduce: Statement
			reduce(10), // error, reduce: Statement
			reduce(10), // true, reduce: Statement
			reduce(10), // false, reduce: Statement
			reduce(10), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(169), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(34), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(34), // plus, reduce: Factor
			reduce(34), // minus, reduce: Factor
			reduce(34), // lte, reduce: Factor
			reduce(34), // gte, reduce: Factor
			reduce(34), // lt, reduce: Factor
			reduce(34), // gt, reduce: Factor
			reduce(34), // eq, reduce: Factor
			reduce(34), // neq, reduce: Factor
			reduce(34), // and, reduce: Factor
			reduce(34), // or, reduce: Factor
			reduce(34), // mul, reduce: Factor
			reduce(34), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(16), // rparen, reduce: Expression
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(16), // plus, reduce: Expression
			reduce(16), // minus, reduce: Expression
			reduce(16), // lte, reduce: Expression
			reduce(16), // gte, reduce: Expression
			reduce(16), // lt, reduce: Expression
			reduce(16), // gt, reduce: Expression
			reduce(16), // eq, reduce: Expression
			reduce(16), // neq, reduce: Expression
			reduce(16), // and, reduce: Expression
			reduce(16), // or, reduce: Expression
			shift(100), // mul
			shift(101), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(28), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(28), // plus, reduce: Term
			reduce(28), // minus, reduce: Term
			reduce(28), // lte, reduce: Term
			reduce(28), // gte, reduce: Term
			reduce(28), // lt, reduce: Term
			reduce(28), // gt, reduce: Term
			reduce(28), // eq, reduce: Term
			reduce(28), // neq, reduce: Term
			reduce(28), // and, reduce: Term
			reduce(28), // or, reduce: Term
			reduce(28), // mul, reduce: Term
			reduce(28), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(29), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(29), // plus, reduce: Term
			reduce(29), // minus, reduce: Term
			reduce(29), // lte, reduce: Term
			reduce(29), // gte, reduce: Term
			reduce(29), // lt, reduce: Term
			reduce(29), // gt, reduce: Term
			reduce(29), // eq, reduce: Term
			reduce(29), // neq, reduce: Term
			reduce(29), // and, reduce: Term
			reduce(29), // or, reduce: Term
			reduce(29), // mul, reduce: Term
			reduce(29), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(40), // rparen, reduce: Set
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(40), // plus, reduce: Set
			reduce(40), // minus, reduce: Set
			reduce(40), // lte, reduce: Set
			reduce(40), // gte, reduce: Set
			reduce(40), // lt, reduce: Set
			reduce(40), // gt, reduce: Set
			reduce(40), // eq, reduce: Set
			reduce(40), // neq, reduce: Set
			reduce(40), // and, reduce: Set
			reduce(40), // or, reduce: Set
			reduce(40), // mul, reduce: Set
			reduce(40), // div, reduce: Set
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(170), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(34), // lfigure, reduce: Factor
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(34), // plus, reduce: Factor
			reduce(34), // minus, reduce: Factor
			reduce(34), // lte, reduce: Factor
			reduce(34), // gte, reduce: Factor
			reduce(34), // lt, reduce: Factor
			reduce(34), // gt, reduce: Factor
			reduce(34), // eq, reduce: Factor
			reduce(34), // neq, reduce: Factor
			reduce(34), // and, reduce: Factor
			reduce(34), // or, reduce: Factor
			reduce(34), // mul, reduce: Factor
			reduce(34), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // $, reduce: Statement
			nil,       // empty
			nil,       // func
			reduce(8), // ident, reduce: Statement
			reduce(8), // lparen, reduce: Statement
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(8), // if, reduce: Statement
			reduce(8), // iter, reduce: Statement
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(8), // ent, reduce: Statement
			reduce(8), // return, reduce: Statement
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(8), // string_literal, reduce: Statement
			reduce(8), // error, reduce: Statement
			reduce(8), // true, reduce: Statement
			reduce(8), // false, reduce: Statement
			reduce(8), // lquad, reduce: Statement
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(172), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S146
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(173), // ident
			shift(7),   // lparen
			nil,        // rparen
			nil,        // lfigure
			shift(175), // rfigure
			shift(176), // if
			shift(178), // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			shift(179), // ent
			shift(180), // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(18),  // string_literal
			shift(19),  // error
			shift(20),  // true
			shift(21),  // false
			shift(22),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(16), // lfigure, reduce: Expression
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(16), // plus, reduce: Expression
			reduce(16), // minus, reduce: Expression
			reduce(16), // lte, reduce: Expression
			reduce(16), // gte, reduce: Expression
			reduce(16), // lt, reduce: Expression
			reduce(16), // gt, reduce: Expression
			reduce(16), // eq, reduce: Expression
			reduce(16), // neq, reduce: Expression
			reduce(16), // and, reduce: Expression
			reduce(16), // or, reduce: Expression
			shift(108), // mul
			shift(109), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(28), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(28), // plus, reduce: Term
			reduce(28), // minus, reduce: Term
			reduce(28), // lte, reduce: Term
			reduce(28), // gte, reduce: Term
			reduce(28), // lt, reduce: Term
			reduce(28), // gt, reduce: Term
			reduce(28), // eq, reduce: Term
			reduce(28), // neq, reduce: Term
			reduce(28), // and, reduce: Term
			reduce(28), // or, reduce: Term
			reduce(28), // mul, reduce: Term
			reduce(28), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(29), // lfigure, reduce: Term
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(29), // plus, reduce: Term
			reduce(29), // minus, reduce: Term
			reduce(29), // lte, reduce: Term
			reduce(29), // gte, reduce: Term
			reduce(29), // lt, reduce: Term
			reduce(29), // gt, reduce: Term
			reduce(29), // eq, reduce: Term
			reduce(29), // neq, reduce: Term
			reduce(29), // and, reduce: Term
			reduce(29), // or, reduce: Term
			reduce(29), // mul, reduce: Term
			reduce(29), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(40), // lfigure, reduce: Set
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(40), // plus, reduce: Set
			reduce(40), // minus, reduce: Set
			reduce(40), // lte, reduce: Set
			reduce(40), // gte, reduce: Set
			reduce(40), // lt, reduce: Set
			reduce(40), // gt, reduce: Set
			reduce(40), // eq, reduce: Set
			reduce(40), // neq, reduce: Set
			reduce(40), // and, reduce: Set
			reduce(40), // or, reduce: Set
			reduce(40), // mul, reduce: Set
			reduce(40), // div, reduce: Set
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(172), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(182), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(183), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(34), // plus, reduce: Factor
			reduce(34), // minus, reduce: Factor
			reduce(34), // lte, reduce: Factor
			reduce(34), // gte, reduce: Factor
			reduce(34), // lt, reduce: Factor
			reduce(34), // gt, reduce: Factor
			reduce(34), // eq, reduce: Factor
			reduce(34), // neq, reduce: Factor
			reduce(34), // and, reduce: Factor
			reduce(34), // or, reduce: Factor
			reduce(34), // mul, reduce: Factor
			reduce(34), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(34), // rquad, reduce: Factor
			reduce(34), // comma, reduce: Factor
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(16), // plus, reduce: Expression
			reduce(16), // minus, reduce: Expression
			reduce(16), // lte, reduce: Expression
			reduce(16), // gte, reduce: Expression
			reduce(16), // lt, reduce: Expression
			reduce(16), // gt, reduce: Expression
			reduce(16), // eq, reduce: Expression
			reduce(16), // neq, reduce: Expression
			reduce(16), // and, reduce: Expression
			reduce(16), // or, reduce: Expression
			shift(121), // mul
			shift(122), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(16), // rquad, reduce: Expression
			reduce(16), // comma, reduce: Expression
		},
	},
	actionRow{ // S156
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(68), // ident
			shift(69), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(75), // string_literal
			shift(77), // error
			shift(78), // true
			shift(79), // false
			shift(80), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(28), // plus, reduce: Term
			reduce(28), // minus, reduce: Term
			reduce(28), // lte, reduce: Term
			reduce(28), // gte, reduce: Term
			reduce(28), // lt, reduce: Term
			reduce(28), // gt, reduce: Term
			reduce(28), // eq, reduce: Term
			reduce(28), // neq, reduce: Term
			reduce(28), // and, reduce: Term
			reduce(28), // or, reduce: Term
			reduce(28), // mul, reduce: Term
			reduce(28), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(28), // rquad, reduce: Term
			reduce(28), // comma, reduce: Term
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(29), // plus, reduce: Term
			reduce(29), // minus, reduce: Term
			reduce(29), // lte, reduce: Term
			reduce(29), // gte, reduce: Term
			reduce(29), // lt, reduce: Term
			reduce(29), // gt, reduce: Term
			reduce(29), // eq, reduce: Term
			reduce(29), // neq, reduce: Term
			reduce(29), // and, reduce: Term
			reduce(29), // or, reduce: Term
			reduce(29), // mul, reduce: Term
			reduce(29), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(29), // rquad, reduce: Term
			reduce(29), // comma, reduce: Term
		},
	},
	actionRow{ // S159
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(40), // plus, reduce: Set
			reduce(40), // minus, reduce: Set
			reduce(40), // lte, reduce: Set
			reduce(40), // gte, reduce: Set
			reduce(40), // lt, reduce: Set
			reduce(40), // gt, reduce: Set
			reduce(40), // eq, reduce: Set
			reduce(40), // neq, reduce: Set
			reduce(40), // and, reduce: Set
			reduce(40), // or, reduce: Set
			reduce(40), // mul, reduce: Set
			reduce(40), // div, reduce: Set
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(40), // rquad, reduce: Set
			reduce(40), // comma, reduce: Set
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(48), // rparen, reduce: FormalArgsList
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(48), // comma, reduce: FormalArgsList
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(186), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S162
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			shift(187), // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(34), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(34), // plus, reduce: Factor
			reduce(34), // minus, reduce: Factor
			reduce(34), // lte, reduce: Factor
			reduce(34), // gte, reduce: Factor
			reduce(34), // lt, reduce: Factor
			reduce(34), // gt, reduce: Factor
			reduce(34), // eq, reduce: Factor
			reduce(34), // neq, reduce: Factor
			reduce(34), // and, reduce: Factor
			reduce(34), // or, reduce: Factor
			reduce(34), // mul, reduce: Factor
			reduce(34), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(34), // comma, reduce: Factor
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(16), // rparen, reduce: Expression
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(16), // plus, reduce: Expression
			reduce(16), // minus, reduce: Expression
			reduce(16), // lte, reduce: Expression
			reduce(16), // gte, reduce: Expression
			reduce(16), // lt, reduce: Expression
			reduce(16), // gt, reduce: Expression
			reduce(16), // eq, reduce: Expression
			reduce(16), // neq, reduce: Expression
			reduce(16), // and, reduce: Expression
			reduce(16), // or, reduce: Expression
			shift(131), // mul
			shift(132), // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(16), // comma, reduce: Expression
		},
	},
	actionRow{ // S165
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(82), // ident
			shift(83), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(89), // string_literal
			shift(91), // error
			shift(92), // true
			shift(93), // false
			shift(94), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(28), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(28), // plus, reduce: Term
			reduce(28), // minus, reduce: Term
			reduce(28), // lte, reduce: Term
			reduce(28), // gte, reduce: Term
			reduce(28), // lt, reduce: Term
			reduce(28), // gt, reduce: Term
			reduce(28), // eq, reduce: Term
			reduce(28), // neq, reduce: Term
			reduce(28), // and, reduce: Term
			reduce(28), // or, reduce: Term
			reduce(28), // mul, reduce: Term
			reduce(28), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(28), // comma, reduce: Term
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(29), // rparen, reduce: Term
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(29), // plus, reduce: Term
			reduce(29), // minus, reduce: Term
			reduce(29), // lte, reduce: Term
			reduce(29), // gte, reduce: Term
			reduce(29), // lt, reduce: Term
			reduce(29), // gt, reduce: Term
			reduce(29), // eq, reduce: Term
			reduce(29), // neq, reduce: Term
			reduce(29), // and, reduce: Term
			reduce(29), // or, reduce: Term
			reduce(29), // mul, reduce: Term
			reduce(29), // div, reduce: Term
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(29), // comma, reduce: Term
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(40), // rparen, reduce: Set
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(40), // plus, reduce: Set
			reduce(40), // minus, reduce: Set
			reduce(40), // lte, reduce: Set
			reduce(40), // gte, reduce: Set
			reduce(40), // lt, reduce: Set
			reduce(40), // gt, reduce: Set
			reduce(40), // eq, reduce: Set
			reduce(40), // neq, reduce: Set
			reduce(40), // and, reduce: Set
			reduce(40), // or, reduce: Set
			reduce(40), // mul, reduce: Set
			reduce(40), // div, reduce: Set
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(40), // comma, reduce: Set
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(36), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(36), // plus, reduce: Factor
			reduce(36), // minus, reduce: Factor
			reduce(36), // lte, reduce: Factor
			reduce(36), // gte, reduce: Factor
			reduce(36), // lt, reduce: Factor
			reduce(36), // gt, reduce: Factor
			reduce(36), // eq, reduce: Factor
			reduce(36), // neq, reduce: Factor
			reduce(36), // and, reduce: Factor
			reduce(36), // or, reduce: Factor
			reduce(36), // mul, reduce: Factor
			reduce(36), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			reduce(36), // lfigure, reduce: Factor
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(36), // plus, reduce: Factor
			reduce(36), // minus, reduce: Factor
			reduce(36), // lte, reduce: Factor
			reduce(36), // gte, reduce: Factor
			reduce(36), // lt, reduce: Factor
			reduce(36), // gt, reduce: Factor
			reduce(36), // eq, reduce: Factor
			reduce(36), // neq, reduce: Factor
			reduce(36), // and, reduce: Factor
			reduce(36), // or, reduce: Factor
			reduce(36), // mul, reduce: Factor
			reduce(36), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(14), // $, reduce: IfStatement
			nil,        // empty
			nil,        // func
			reduce(14), // ident, reduce: IfStatement
			reduce(14), // lparen, reduce: IfStatement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(14), // if, reduce: IfStatement
			reduce(14), // iter, reduce: IfStatement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(14), // ent, reduce: IfStatement
			reduce(14), // return, reduce: IfStatement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(14), // string_literal, reduce: IfStatement
			reduce(14), // error, reduce: IfStatement
			reduce(14), // true, reduce: IfStatement
			reduce(14), // false, reduce: IfStatement
			reduce(14), // lquad, reduce: IfStatement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(6), // rfigure, reduce: Statements
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			shift(24),  // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			shift(190), // assign
			reduce(35), // semicolon, reduce: Factor
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(35), // plus, reduce: Factor
			reduce(35), // minus, reduce: Factor
			reduce(35), // lte, reduce: Factor
			reduce(35), // gte, reduce: Factor
			reduce(35), // lt, reduce: Factor
			reduce(35), // gt, reduce: Factor
			reduce(35), // eq, reduce: Factor
			reduce(35), // neq, reduce: Factor
			reduce(35), // and, reduce: Factor
			reduce(35), // or, reduce: Factor
			reduce(35), // mul, reduce: Factor
			reduce(35), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(5), // ident, reduce: Statements
			reduce(5), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(5), // rfigure, reduce: Statements
			reduce(5), // if, reduce: Statements
			reduce(5), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(5), // ent, reduce: Statements
			reduce(5), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(5), // string_literal, reduce: Statements
			reduce(5), // error, reduce: Statements
			reduce(5), // true, reduce: Statements
			reduce(5), // false, reduce: Statements
			reduce(5), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(7), // $, reduce: StatementBlock
			nil,       // empty
			nil,       // func
			reduce(7), // ident, reduce: StatementBlock
			reduce(7), // lparen, reduce: StatementBlock
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(7), // if, reduce: StatementBlock
			reduce(7), // iter, reduce: StatementBlock
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(7), // ent, reduce: StatementBlock
			reduce(7), // return, reduce: StatementBlock
			reduce(7), // else, reduce: StatementBlock
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(7), // string_literal, reduce: StatementBlock
			reduce(7), // error, reduce: StatementBlock
			reduce(7), // true, reduce: StatementBlock
			reduce(7), // false, reduce: StatementBlock
			reduce(7), // lquad, reduce: StatementBlock
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S176
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(38), // ident
			shift(39), // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(45), // string_literal
			shift(46), // error
			shift(47), // true
			shift(48), // false
			shift(49), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(192), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(193), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(194), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S180
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S181
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // $, reduce: Statement
			nil,       // empty
			nil,       // func
			reduce(9), // ident, reduce: Statement
			reduce(9), // lparen, reduce: Statement
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(9), // if, reduce: Statement
			reduce(9), // iter, reduce: Statement
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(9), // ent, reduce: Statement
			reduce(9), // return, reduce: Statement
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(9), // string_literal, reduce: Statement
			reduce(9), // error, reduce: Statement
			reduce(9), // true, reduce: Statement
			reduce(9), // false, reduce: Statement
			reduce(9), // lquad, reduce: Statement
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // $, reduce: Statement
			nil,        // empty
			nil,        // func
			reduce(11), // ident, reduce: Statement
			reduce(11), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			reduce(11), // if, reduce: Statement
			reduce(11), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(11), // ent, reduce: Statement
			reduce(11), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(11), // string_literal, reduce: Statement
			reduce(11), // error, reduce: Statement
			reduce(11), // true, reduce: Statement
			reduce(11), // false, reduce: Statement
			reduce(11), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S183
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(36), // plus, reduce: Factor
			reduce(36), // minus, reduce: Factor
			reduce(36), // lte, reduce: Factor
			reduce(36), // gte, reduce: Factor
			reduce(36), // lt, reduce: Factor
			reduce(36), // gt, reduce: Factor
			reduce(36), // eq, reduce: Factor
			reduce(36), // neq, reduce: Factor
			reduce(36), // and, reduce: Factor
			reduce(36), // or, reduce: Factor
			reduce(36), // mul, reduce: Factor
			reduce(36), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(36), // rquad, reduce: Factor
			reduce(36), // comma, reduce: Factor
		},
	},
	actionRow{ // S184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			reduce(43), // rquad, reduce: ArgsList
			reduce(43), // comma, reduce: ArgsList
		},
	},
	actionRow{ // S185
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(45), // rparen, reduce: FormalArgs
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			shift(196), // comma
		},
	},
	actionRow{ // S186
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(198), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S187
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(36), // rparen, reduce: Factor
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			reduce(36), // plus, reduce: Factor
			reduce(36), // minus, reduce: Factor
			reduce(36), // lte, reduce: Factor
			reduce(36), // gte, reduce: Factor
			reduce(36), // lt, reduce: Factor
			reduce(36), // gt, reduce: Factor
			reduce(36), // eq, reduce: Factor
			reduce(36), // neq, reduce: Factor
			reduce(36), // and, reduce: Factor
			reduce(36), // or, reduce: Factor
			reduce(36), // mul, reduce: Factor
			reduce(36), // div, reduce: Factor
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(36), // comma, reduce: Factor
		},
	},
	actionRow{ // S188
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(43), // rparen, reduce: ArgsList
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(43), // comma, reduce: ArgsList
		},
	},
	actionRow{ // S189
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(173), // ident
			shift(7),   // lparen
			nil,        // rparen
			nil,        // lfigure
			shift(199), // rfigure
			shift(176), // if
			shift(178), // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			shift(179), // ent
			shift(180), // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(18),  // string_literal
			shift(19),  // error
			shift(20),  // true
			shift(21),  // false
			shift(22),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S190
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S191
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(202), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S192
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(12), // ident, reduce: Statement
			reduce(12), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			reduce(12), // rfigure, reduce: Statement
			reduce(12), // if, reduce: Statement
			reduce(12), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(12), // ent, reduce: Statement
			reduce(12), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(12), // string_literal, reduce: Statement
			reduce(12), // error, reduce: Statement
			reduce(12), // true, reduce: Statement
			reduce(12), // false, reduce: Statement
			reduce(12), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S193
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			shift(203), // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			shift(204), // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S195
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(205), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S196
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(206), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S197
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: Function
			nil,       // empty
			reduce(4), // func, reduce: Function
			reduce(4), // ident, reduce: Function
			reduce(4), // lparen, reduce: Function
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(4), // if, reduce: Function
			reduce(4), // iter, reduce: Function
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(4), // ent, reduce: Function
			reduce(4), // return, reduce: Function
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(4), // string_literal, reduce: Function
			reduce(4), // error, reduce: Function
			reduce(4), // true, reduce: Function
			reduce(4), // false, reduce: Function
			reduce(4), // lquad, reduce: Function
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S198
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(6), // rfigure, reduce: Statements
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S199
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(7), // $, reduce: StatementBlock
			nil,       // empty
			nil,       // func
			reduce(7), // ident, reduce: StatementBlock
			reduce(7), // lparen, reduce: StatementBlock
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(7), // if, reduce: StatementBlock
			reduce(7), // iter, reduce: StatementBlock
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(7), // ent, reduce: StatementBlock
			reduce(7), // return, reduce: StatementBlock
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(7), // string_literal, reduce: StatementBlock
			reduce(7), // error, reduce: StatementBlock
			reduce(7), // true, reduce: StatementBlock
			reduce(7), // false, reduce: StatementBlock
			reduce(7), // lquad, reduce: StatementBlock
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S200
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(208), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S201
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(15), // ident, reduce: IfStatement
			reduce(15), // lparen, reduce: IfStatement
			nil,        // rparen
			nil,        // lfigure
			reduce(15), // rfigure, reduce: IfStatement
			reduce(15), // if, reduce: IfStatement
			reduce(15), // iter, reduce: IfStatement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(15), // ent, reduce: IfStatement
			reduce(15), // return, reduce: IfStatement
			shift(210), // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(15), // string_literal, reduce: IfStatement
			reduce(15), // error, reduce: IfStatement
			reduce(15), // true, reduce: IfStatement
			reduce(15), // false, reduce: IfStatement
			reduce(15), // lquad, reduce: IfStatement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S202
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(6), // rfigure, reduce: Statements
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(212), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S204
		canRecover: true,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(64), // ident
			shift(7),  // lparen
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			nil,       // if
			nil,       // iter
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			nil,       // ent
			nil,       // return
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			shift(18), // string_literal
			shift(19), // error
			shift(20), // true
			shift(21), // false
			shift(22), // lquad
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(13), // ident, reduce: Statement
			reduce(13), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			reduce(13), // rfigure, reduce: Statement
			reduce(13), // if, reduce: Statement
			reduce(13), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(13), // ent, reduce: Statement
			reduce(13), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(13), // string_literal, reduce: Statement
			reduce(13), // error, reduce: Statement
			reduce(13), // true, reduce: Statement
			reduce(13), // false, reduce: Statement
			reduce(13), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(214), // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S207
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(173), // ident
			shift(7),   // lparen
			nil,        // rparen
			nil,        // lfigure
			shift(215), // rfigure
			shift(176), // if
			shift(178), // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			shift(179), // ent
			shift(180), // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(18),  // string_literal
			shift(19),  // error
			shift(20),  // true
			shift(21),  // false
			shift(22),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S208
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(10), // ident, reduce: Statement
			reduce(10), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			reduce(10), // rfigure, reduce: Statement
			reduce(10), // if, reduce: Statement
			reduce(10), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(10), // ent, reduce: Statement
			reduce(10), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(10), // string_literal, reduce: Statement
			reduce(10), // error, reduce: Statement
			reduce(10), // true, reduce: Statement
			reduce(10), // false, reduce: Statement
			reduce(10), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S209
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(8), // ident, reduce: Statement
			reduce(8), // lparen, reduce: Statement
			nil,       // rparen
			nil,       // lfigure
			reduce(8), // rfigure, reduce: Statement
			reduce(8), // if, reduce: Statement
			reduce(8), // iter, reduce: Statement
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(8), // ent, reduce: Statement
			reduce(8), // return, reduce: Statement
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(8), // string_literal, reduce: Statement
			reduce(8), // error, reduce: Statement
			reduce(8), // true, reduce: Statement
			reduce(8), // false, reduce: Statement
			reduce(8), // lquad, reduce: Statement
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S210
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(217), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S211
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(173), // ident
			shift(7),   // lparen
			nil,        // rparen
			nil,        // lfigure
			shift(218), // rfigure
			shift(176), // if
			shift(178), // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			shift(179), // ent
			shift(180), // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(18),  // string_literal
			shift(19),  // error
			shift(20),  // true
			shift(21),  // false
			shift(22),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S212
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			shift(217), // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S213
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			nil,        // rparen
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			shift(220), // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			shift(52),  // plus
			shift(53),  // minus
			shift(54),  // lte
			shift(55),  // gte
			shift(56),  // lt
			shift(57),  // gt
			shift(58),  // eq
			shift(59),  // neq
			shift(60),  // and
			shift(61),  // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S214
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // ident
			nil,        // lparen
			reduce(47), // rparen, reduce: FormalArgsList
			nil,        // lfigure
			nil,        // rfigure
			nil,        // if
			nil,        // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			nil,        // ent
			nil,        // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			nil,        // string_literal
			nil,        // error
			nil,        // true
			nil,        // false
			nil,        // lquad
			nil,        // rquad
			reduce(47), // comma, reduce: FormalArgsList
		},
	},
	actionRow{ // S215
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(7), // $, reduce: StatementBlock
			nil,       // empty
			reduce(7), // func, reduce: StatementBlock
			reduce(7), // ident, reduce: StatementBlock
			reduce(7), // lparen, reduce: StatementBlock
			nil,       // rparen
			nil,       // lfigure
			nil,       // rfigure
			reduce(7), // if, reduce: StatementBlock
			reduce(7), // iter, reduce: StatementBlock
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(7), // ent, reduce: StatementBlock
			reduce(7), // return, reduce: StatementBlock
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(7), // string_literal, reduce: StatementBlock
			reduce(7), // error, reduce: StatementBlock
			reduce(7), // true, reduce: StatementBlock
			reduce(7), // false, reduce: StatementBlock
			reduce(7), // lquad, reduce: StatementBlock
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S216
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(14), // ident, reduce: IfStatement
			reduce(14), // lparen, reduce: IfStatement
			nil,        // rparen
			nil,        // lfigure
			reduce(14), // rfigure, reduce: IfStatement
			reduce(14), // if, reduce: IfStatement
			reduce(14), // iter, reduce: IfStatement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(14), // ent, reduce: IfStatement
			reduce(14), // return, reduce: IfStatement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(14), // string_literal, reduce: IfStatement
			reduce(14), // error, reduce: IfStatement
			reduce(14), // true, reduce: IfStatement
			reduce(14), // false, reduce: IfStatement
			reduce(14), // lquad, reduce: IfStatement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S217
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(6), // ident, reduce: Statements
			reduce(6), // lparen, reduce: Statements
			nil,       // rparen
			nil,       // lfigure
			reduce(6), // rfigure, reduce: Statements
			reduce(6), // if, reduce: Statements
			reduce(6), // iter, reduce: Statements
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(6), // ent, reduce: Statements
			reduce(6), // return, reduce: Statements
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(6), // string_literal, reduce: Statements
			reduce(6), // error, reduce: Statements
			reduce(6), // true, reduce: Statements
			reduce(6), // false, reduce: Statements
			reduce(6), // lquad, reduce: Statements
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S218
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(7), // ident, reduce: StatementBlock
			reduce(7), // lparen, reduce: StatementBlock
			nil,       // rparen
			nil,       // lfigure
			reduce(7), // rfigure, reduce: StatementBlock
			reduce(7), // if, reduce: StatementBlock
			reduce(7), // iter, reduce: StatementBlock
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(7), // ent, reduce: StatementBlock
			reduce(7), // return, reduce: StatementBlock
			reduce(7), // else, reduce: StatementBlock
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(7), // string_literal, reduce: StatementBlock
			reduce(7), // error, reduce: StatementBlock
			reduce(7), // true, reduce: StatementBlock
			reduce(7), // false, reduce: StatementBlock
			reduce(7), // lquad, reduce: StatementBlock
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S219
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(9), // ident, reduce: Statement
			reduce(9), // lparen, reduce: Statement
			nil,       // rparen
			nil,       // lfigure
			reduce(9), // rfigure, reduce: Statement
			reduce(9), // if, reduce: Statement
			reduce(9), // iter, reduce: Statement
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(9), // ent, reduce: Statement
			reduce(9), // return, reduce: Statement
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(9), // string_literal, reduce: Statement
			reduce(9), // error, reduce: Statement
			reduce(9), // true, reduce: Statement
			reduce(9), // false, reduce: Statement
			reduce(9), // lquad, reduce: Statement
			nil,       // rquad
			nil,       // comma
		},
	},
	actionRow{ // S220
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(11), // ident, reduce: Statement
			reduce(11), // lparen, reduce: Statement
			nil,        // rparen
			nil,        // lfigure
			reduce(11), // rfigure, reduce: Statement
			reduce(11), // if, reduce: Statement
			reduce(11), // iter, reduce: Statement
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			reduce(11), // ent, reduce: Statement
			reduce(11), // return, reduce: Statement
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			reduce(11), // string_literal, reduce: Statement
			reduce(11), // error, reduce: Statement
			reduce(11), // true, reduce: Statement
			reduce(11), // false, reduce: Statement
			reduce(11), // lquad, reduce: Statement
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S221
		canRecover: true,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(173), // ident
			shift(7),   // lparen
			nil,        // rparen
			nil,        // lfigure
			shift(222), // rfigure
			shift(176), // if
			shift(178), // iter
			nil,        // by
			nil,        // assign
			nil,        // semicolon
			shift(179), // ent
			shift(180), // return
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // lte
			nil,        // gte
			nil,        // lt
			nil,        // gt
			nil,        // eq
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // mul
			nil,        // div
			shift(18),  // string_literal
			shift(19),  // error
			shift(20),  // true
			shift(21),  // false
			shift(22),  // lquad
			nil,        // rquad
			nil,        // comma
		},
	},
	actionRow{ // S222
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(7), // ident, reduce: StatementBlock
			reduce(7), // lparen, reduce: StatementBlock
			nil,       // rparen
			nil,       // lfigure
			reduce(7), // rfigure, reduce: StatementBlock
			reduce(7), // if, reduce: StatementBlock
			reduce(7), // iter, reduce: StatementBlock
			nil,       // by
			nil,       // assign
			nil,       // semicolon
			reduce(7), // ent, reduce: StatementBlock
			reduce(7), // return, reduce: StatementBlock
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // lte
			nil,       // gte
			nil,       // lt
			nil,       // gt
			nil,       // eq
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // mul
			nil,       // div
			reduce(7), // string_literal, reduce: StatementBlock
			reduce(7), // error, reduce: StatementBlock
			reduce(7), // true, reduce: StatementBlock
			reduce(7), // false, reduce: StatementBlock
			reduce(7), // lquad, reduce: StatementBlock
			nil,       // rquad
			nil,       // comma
		},
	},
}
